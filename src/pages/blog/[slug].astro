---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import ReturnToTop from '../../components/ReturnToTop.astro';
import ReadingProgress from '../../components/ReadingProgress.astro';
import 'katex/dist/katex.min.css';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

// Estimate reading time
const wordsPerMinute = 200;
const wordCount = post.body.split(/\s+/g).length;
const readingTime = Math.ceil(wordCount / wordsPerMinute);
---

<MainLayout title={`${post.data.title} | Blog | Peiyang Li`}>
  <ReadingProgress />
  <TableOfContents headings={headings} />
  
  <article class="pt-20 lg:pt-24">
    <div class="apple-container max-w-4xl">
      <header class="mb-12">
        <h1 class="apple-heading mb-4">{post.data.title}</h1>
        
        <div class="flex flex-wrap items-center gap-4 text-gray-600">
          <time datetime={post.data.pubDate.toISOString()}>
            {new Date(post.data.pubDate).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
          {post.data.category && (
            <span class="px-3 py-1 bg-gray-100 rounded-full">
              {post.data.category}
            </span>
          )}
          <span class="px-3 py-1 bg-gray-100 rounded-full flex items-center gap-1">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {readingTime} min read
          </span>
        </div>
      </header>

      <div class="prose prose-lg mx-auto">
        <Content />
      </div>

      {post.data.attachments && post.data.attachments.length > 0 && (
        <div class="mt-12 p-6 bg-gray-50 rounded-xl">
          <h2 class="text-xl font-semibold mb-4">Attachments</h2>
          <ul class="space-y-3">
            {post.data.attachments.map((attachment: any) => (
              <li>
                <a 
                  href={`/blog-assets/${attachment.file}`}
                  download
                  class="flex items-center gap-2 text-blue-600 hover:text-blue-800"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  {attachment.name || attachment.file}
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}

      <div class="mt-12 flex justify-center">
        <a 
          href="/blog"
          class="apple-button apple-button-secondary"
        >
          ‚Üê Back to Blog
        </a>
      </div>
    </div>
  </article>

  <ReturnToTop />
</MainLayout>

<style>
  article {
    transition: padding-left 0.3s ease;
  }

  @media (min-width: 1024px) {
    article {
      padding-left: var(--toc-width, 300px);
    }
  }
</style>

<script>
  // Handle TOC state and article padding
  const tocWrapper = document.getElementById('toc-wrapper');
  const article = document.querySelector('article');

  // Watch for TOC visibility changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        const isTocHidden = tocWrapper?.classList.contains('-translate-x-full');
        if (article) {
          article.style.setProperty('--toc-width', isTocHidden ? '0px' : '300px');
        }
      }
    });
  });

  if (tocWrapper) {
    observer.observe(tocWrapper, { attributes: true });
  }

  // Set initial state
  if (article && tocWrapper) {
    const isTocHidden = tocWrapper.classList.contains('-translate-x-full');
    article.style.setProperty('--toc-width', isTocHidden ? '0px' : '300px');
  }
</script>

<style is:global>
  /* Base typography */
  .prose {
    font-size: 1.125rem;
    line-height: 1.8;
    color: #1d1d1f;
  }

  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    font-weight: 600;
    line-height: 1.3;
    margin-top: 2em;
    margin-bottom: 1em;
    color: #1d1d1f;
  }

  .prose h1 { font-size: 2.5rem; }
  .prose h2 { font-size: 2rem; }
  .prose h3 { font-size: 1.75rem; }
  .prose h4 { font-size: 1.5rem; }
  .prose h5 { font-size: 1.25rem; }
  .prose h6 { font-size: 1.125rem; }

  /* Paragraph spacing */
  .prose p {
    margin: 1.5em 0;
  }

  /* Links */
  .prose a {
    color: #0066cc;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .prose a:hover {
    color: #004499;
    text-decoration: underline;
  }

  /* Lists */
  .prose ul, .prose ol {
    margin: 1.5em 0;
    padding-left: 1.5em;
  }

  .prose li {
    margin: 0.5em 0;
  }

  .prose ul > li {
    list-style-type: disc;
  }

  .prose ol > li {
    list-style-type: decimal;
  }

  /* Code blocks */
  .prose pre {
    background-color: #f5f5f7;
    border-radius: 1rem;
    padding: 1.5em;
    margin: 1.5em 0;
    overflow-x: auto;
    font-size: 0.9em;
    border: 1px solid #e5e5e5;
  }
  
  /* Inline code */
  .prose code {
    background-color: #f5f5f7;
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
    font-size: 0.875em;
    color: #0066cc;
  }

  /* Don't style code inside pre */
  .prose pre code {
    background-color: transparent;
    padding: 0;
    color: inherit;
  }
  
  /* Blockquotes */
  .prose blockquote {
    border-left: 4px solid #0066cc;
    padding: 1em 1.5em;
    margin: 1.5em 0;
    background-color: #f5f5f7;
    border-radius: 0 1rem 1rem 0;
    font-style: italic;
    color: #1d1d1f;
  }
  
  /* Images */
  .prose img {
    border-radius: 1rem;
    margin: 2em auto;
    display: block;
    max-width: 100%;
    height: auto;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* Tables */
  .prose table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin: 2em 0;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .prose th {
    background-color: #f5f5f7;
    font-weight: 600;
    text-align: left;
    color: #1d1d1f;
  }

  .prose th, .prose td {
    padding: 1em;
    border: 1px solid #e5e5e5;
  }

  .prose tr:nth-child(even) {
    background-color: #fafafa;
  }

  /* Task lists */
  .prose ul > li > input[type="checkbox"] {
    margin-right: 0.75em;
    margin-top: 0.3em;
  }

  /* Admonitions */
  .prose :is(.note, .tip, .warning, .danger) {
    padding: 1.5em;
    margin: 2em 0;
    border-radius: 1rem;
    border-left: 4px solid;
  }

  .prose .note {
    background-color: #f5f5f7;
    border-left-color: #0066cc;
  }

  .prose .tip {
    background-color: #f2f7ed;
    border-left-color: #36b37e;
  }

  .prose .warning {
    background-color: #fff7ed;
    border-left-color: #f59e0b;
  }

  .prose .danger {
    background-color: #fef2f2;
    border-left-color: #ef4444;
  }

  /* Details/Summary */
  .prose details {
    padding: 1.5em;
    background-color: #f5f5f7;
    border-radius: 1rem;
    margin: 2em 0;
    border: 1px solid #e5e5e5;
  }

  .prose summary {
    cursor: pointer;
    font-weight: 600;
    color: #0066cc;
  }

  .prose details[open] summary {
    margin-bottom: 1.5em;
    padding-bottom: 1em;
    border-bottom: 1px solid #e5e5e5;
  }

  /* Keyboard shortcuts */
  .prose kbd {
    background-color: #f5f5f7;
    border: 1px solid #e5e5e5;
    border-radius: 0.25rem;
    padding: 0.2em 0.4em;
    font-size: 0.875em;
    box-shadow: 0 1px 0 #e5e5e5;
    color: #1d1d1f;
  }

  /* Math formulas */
  .katex-display {
    overflow-x: auto;
    overflow-y: hidden;
    padding: 1em 0;
    background-color: #f5f5f7;
    border-radius: 1rem;
    margin: 1.5em 0;
  }

  /* Footnotes */
  .prose .footnotes {
    border-top: 2px solid #e5e5e5;
    margin-top: 3em;
    padding-top: 2em;
    font-size: 0.875em;
    color: #6b7280;
  }

  /* Definition lists */
  .prose dl {
    margin: 2em 0;
    padding: 1.5em;
    background-color: #f5f5f7;
    border-radius: 1rem;
  }

  .prose dt {
    font-weight: 600;
    color: #0066cc;
    margin-top: 1em;
  }

  .prose dt:first-of-type {
    margin-top: 0;
  }

  .prose dd {
    margin-left: 1.5em;
    margin-top: 0.5em;
    color: #1d1d1f;
  }

  /* Horizontal rules */
  .prose hr {
    border: 0;
    height: 2px;
    background-color: #e5e5e5;
    margin: 3em 0;
  }

  /* Mermaid diagrams */
  .prose .mermaid {
    background-color: #f5f5f7;
    border-radius: 1rem;
    padding: 1.5em;
    margin: 2em 0;
    text-align: center;
  }
</style> 