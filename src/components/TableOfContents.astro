---
interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}
const { headings } = Astro.props;
---

<div class="toc-root" id="toc-root">
  <button
    id="toc-toggle"
    class="toc-toggle"
    aria-label="Toggle table of contents"
    type="button"
  >
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    </svg>
  </button>

  <aside id="toc-panel" class="toc-panel">
    <div class="toc-header">
      <span class="toc-title">Table of Contents</span>
      <button id="toc-close" class="toc-close" aria-label="Close table of contents" type="button">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <nav class="toc-list">
      <ul>
        {headings.map((heading) => (
          <li class={`toc-item depth-${heading.depth}`}>
            <a
              href={`#${heading.slug}`}
              class="toc-link"
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </aside>
  <div id="toc-overlay" class="toc-overlay"></div>
</div>

<style>
.toc-root {
  position: fixed;
  top: 6rem;
  left: 0;
  z-index: 40;
  display: flex;
  align-items: flex-start;
}

.toc-toggle {
  position: fixed;
  top: 6rem;
  left: 1rem;
  z-index: 50;
  background: rgba(255,255,255,0.9);
  backdrop-filter: blur(8px);
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  box-shadow: 0 2px 8px 0 rgba(0,0,0,0.04);
  padding: 0.5rem;
  color: #4b5563;
  transition: left 0.3s;
}

@media (min-width: 1024px) {
  .toc-root[data-toc-open="true"] .toc-toggle {
    left: 300px;
  }
  .toc-root[data-toc-open="false"] .toc-toggle {
    left: 1rem;
  }
}

.toc-panel {
  position: fixed;
  top: 6rem;
  left: 0;
  width: 300px;
  height: calc(100vh - 6rem);
  background: rgba(255,255,255,0.95);
  backdrop-filter: blur(8px);
  border-right: 1px solid #e5e7eb;
  box-shadow: 2px 0 8px 0 rgba(0,0,0,0.04);
  border-radius: 0 1rem 1rem 0;
  z-index: 45;
  transform: translateX(0);
  transition: transform 0.3s;
  display: flex;
  flex-direction: column;
}
.toc-panel.closed {
  transform: translateX(-100%);
}

.toc-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1.25rem 1.25rem 0.5rem 1.25rem;
}
.toc-title {
  font-size: 1.1rem;
  font-weight: 600;
  color: #1d1d1f;
}
.toc-close {
  background: none;
  border: none;
  color: #6b7280;
  padding: 0.25rem;
  border-radius: 0.25rem;
  transition: background 0.2s;
}
.toc-close:hover {
  background: #f3f4f6;
  color: #111827;
}
.toc-list {
  overflow-y: auto;
  padding: 0 1.25rem 1.25rem 1.25rem;
  flex: 1 1 auto;
}
.toc-list ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
.toc-item {
  margin: 0.25rem 0;
}
.toc-link {
  display: block;
  color: #6b7280;
  border-left: 2px solid transparent;
  padding: 0.25rem 0.5rem 0.25rem 0.75rem;
  border-radius: 0.25rem;
  text-decoration: none;
  transition: color 0.2s, background 0.2s, border-color 0.2s;
}
.toc-link:hover {
  color: #111827;
  background: #f3f4f6;
}
.toc-link.active {
  color: #0066cc;
  background: #f0f7ff;
  border-left: 2px solid #0066cc;
  font-weight: 500;
}
.depth-2 .toc-link { padding-left: 1.5rem; }
.depth-3 .toc-link { padding-left: 2.5rem; }
.depth-4 .toc-link { padding-left: 3.5rem; }
.depth-5 .toc-link { padding-left: 4.5rem; }
.depth-6 .toc-link { padding-left: 5.5rem; }

.toc-overlay {
  display: none;
}
@media (max-width: 1023px) {
  .toc-panel {
    width: 80vw;
    max-width: 350px;
    height: 100vh;
    top: 0;
    border-radius: 0 1rem 1rem 0;
  }
  .toc-overlay {
    display: block;
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.15);
    z-index: 44;
    opacity: 1;
    pointer-events: auto;
    transition: opacity 0.3s;
  }
  .toc-panel.closed ~ .toc-overlay {
    opacity: 0;
    pointer-events: none;
  }
}
</style>

<script>
let open = window.innerWidth >= 1024;
const tocPanel = document.getElementById('toc-panel');
const tocToggle = document.getElementById('toc-toggle');
const tocClose = document.getElementById('toc-close');
const tocOverlay = document.getElementById('toc-overlay');
const tocRoot = document.getElementById('toc-root');

function setTOCState(show: boolean) {
  open = show;
  if (tocPanel && tocOverlay && tocRoot) {
    if (open) {
      tocPanel.classList.remove('closed');
      tocOverlay.style.display = window.innerWidth < 1024 ? 'block' : 'none';
      tocRoot.setAttribute('data-toc-open', 'true');
    } else {
      tocPanel.classList.add('closed');
      tocOverlay.style.display = 'none';
      tocRoot.setAttribute('data-toc-open', 'false');
    }
  }
  // Set article padding
  const article = document.querySelector('article');
  if (article && window.innerWidth >= 1024) {
    article.style.paddingLeft = open ? '300px' : '0px';
  } else if (article) {
    article.style.paddingLeft = '0px';
  }
}

function toggleTOC(e?: Event) {
  e?.stopPropagation();
  setTOCState(!open);
}

if (tocToggle) tocToggle.addEventListener('click', toggleTOC);
if (tocClose) tocClose.addEventListener('click', toggleTOC);
if (tocOverlay) tocOverlay.addEventListener('click', () => setTOCState(false));

window.addEventListener('resize', () => {
  if (window.innerWidth >= 1024) {
    setTOCState(true);
  } else {
    setTOCState(false);
  }
});

// Highlight active section
const tocLinks = document.querySelectorAll('.toc-link');
const headingsEls = document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]');
const observerOptions = { rootMargin: '-100px 0px -66%', threshold: 1.0 };
const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      tocLinks.forEach(link => link.classList.remove('active'));
      const href = `#${entry.target.id}`;
      const activeLink = document.querySelector(`.toc-link[href="${href}"]`);
      activeLink?.classList.add('active');
      activeLink?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  });
}, observerOptions);
headingsEls.forEach(heading => observer.observe(heading));

tocLinks.forEach(link => {
  link.addEventListener('click', (e: Event) => {
    e.preventDefault();
    const href = link.getAttribute('href');
    if (href) {
      const target = document.querySelector(href);
      target?.scrollIntoView({ behavior: 'smooth' });
      if (window.innerWidth < 1024) setTOCState(false);
    }
  });
});

// Initial state
setTOCState(open);
</script> 